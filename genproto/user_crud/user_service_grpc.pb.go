// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: user_service.proto

package user_crud

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserCrudClient is the client API for UserCrud service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserCrudClient interface {
	Create(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	Get(ctx context.Context, in *IdUser, opts ...grpc.CallOption) (*User, error)
	GetAll(ctx context.Context, in *GetAllUsersParams, opts ...grpc.CallOption) (*GetAllUsersResponse, error)
	Update(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	Delete(ctx context.Context, in *IdUser, opts ...grpc.CallOption) (*Empty, error)
}

type userCrudClient struct {
	cc grpc.ClientConnInterface
}

func NewUserCrudClient(cc grpc.ClientConnInterface) UserCrudClient {
	return &userCrudClient{cc}
}

func (c *userCrudClient) Create(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/proto.UserCrud/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCrudClient) Get(ctx context.Context, in *IdUser, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/proto.UserCrud/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCrudClient) GetAll(ctx context.Context, in *GetAllUsersParams, opts ...grpc.CallOption) (*GetAllUsersResponse, error) {
	out := new(GetAllUsersResponse)
	err := c.cc.Invoke(ctx, "/proto.UserCrud/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCrudClient) Update(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/proto.UserCrud/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCrudClient) Delete(ctx context.Context, in *IdUser, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto.UserCrud/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserCrudServer is the server API for UserCrud service.
// All implementations must embed UnimplementedUserCrudServer
// for forward compatibility
type UserCrudServer interface {
	Create(context.Context, *User) (*User, error)
	Get(context.Context, *IdUser) (*User, error)
	GetAll(context.Context, *GetAllUsersParams) (*GetAllUsersResponse, error)
	Update(context.Context, *User) (*User, error)
	Delete(context.Context, *IdUser) (*Empty, error)
	mustEmbedUnimplementedUserCrudServer()
}

// UnimplementedUserCrudServer must be embedded to have forward compatible implementations.
type UnimplementedUserCrudServer struct {
}

func (UnimplementedUserCrudServer) Create(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedUserCrudServer) Get(context.Context, *IdUser) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedUserCrudServer) GetAll(context.Context, *GetAllUsersParams) (*GetAllUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedUserCrudServer) Update(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedUserCrudServer) Delete(context.Context, *IdUser) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedUserCrudServer) mustEmbedUnimplementedUserCrudServer() {}

// UnsafeUserCrudServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserCrudServer will
// result in compilation errors.
type UnsafeUserCrudServer interface {
	mustEmbedUnimplementedUserCrudServer()
}

func RegisterUserCrudServer(s grpc.ServiceRegistrar, srv UserCrudServer) {
	s.RegisterService(&UserCrud_ServiceDesc, srv)
}

func _UserCrud_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCrudServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserCrud/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCrudServer).Create(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCrud_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCrudServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserCrud/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCrudServer).Get(ctx, req.(*IdUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCrud_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllUsersParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCrudServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserCrud/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCrudServer).GetAll(ctx, req.(*GetAllUsersParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCrud_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCrudServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserCrud/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCrudServer).Update(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCrud_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCrudServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserCrud/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCrudServer).Delete(ctx, req.(*IdUser))
	}
	return interceptor(ctx, in, info, handler)
}

// UserCrud_ServiceDesc is the grpc.ServiceDesc for UserCrud service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserCrud_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.UserCrud",
	HandlerType: (*UserCrudServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _UserCrud_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _UserCrud_Get_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _UserCrud_GetAll_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _UserCrud_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _UserCrud_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_service.proto",
}
